This folder contains configuration files for "experiments" that can be performed by ML-Flex. Each experiment can be configured to use particular data sets, algorithms, number of cross-validation folds, etc. This way, when you run the experiment, you will not only have flexibility in how you configure it, but you will also have a record of the precise settings that were used to run the experiment.

Only one experiment setting is mandatory---if not specified, ML-Flex will return an error. The remaining experiment settings are optional---if you do not specify a value, a default value will be used.

This folder and its subfolders contain various sample experiment files for demo purposes. At the top of each sample file is a description of the experiment.

When multiple values can be specified for a given configuration setting, they should be separated by semicolons.

=============================================================
============== Mandatory experiment setting =================
=============================================================

DATA_PROCESSORS

  Description: Each experiment must specify at least one data processor. A data processor is a Java class within ML-Flex that contains logic for processing a particular data set. ML-Flex provides data processors that can be used to provide common input-data formats, including tab-delimited and ARFF. Additionally, users can create custom data processors by developing a class that inherits from mlflex.dataprocessors.AbstractDataProcessor. In the experiment file, parameters (following Java syntax) can be passed to a data processor. Many examples of how to specify data processors are provided in this directory.
  
  The default delimiter for mlflex.dataprocessors.DelimitedDataProcessor is a tab, but other delimiters can be specified via parameters. Delimited files should contain a header row with an ID for each data instance. Each subsequent row should start with an entry that specifies a data point name followed by the respective value for each instance.
  
  ARFF files should follow the standard format specified at http://www.cs.waikato.ac.nz/ml/weka/arff.html.

  ***Important*** In each experiment, at least one data processor should include one data point called "Class," which contains the class values. Alternatively, if a data point with a different name contains the class values, this can be specified with the DEPENDENT_VARIABLE_NAME setting. The DelimitedInputFile.txt example illustrates this.

  Possible values: Values should be the exact name of a Java class that inherits from mlflex.dataprocessors.AbstractDataProcessor. When the class does not contain a default constructor, input parameters must be specified. 

  Examples:
    mlflex.dataprocessors.DelimitedDataProcessor("UCI/soybean-large.all.data.tab")
    mlflex.dataprocessors.ArffDataProcessor("UCI/iris.arff")
    mlflex.dataprocessors.UciMachineLearningDataProcessor("InputData/UCI/iris.data", -1, 4)
    mlflex.dataprocessors.tcga.TcgaClinicalDataProcessor;mlflex.dataprocessors.tcga.TcgaMrnaLevel3DataProcessor

  Note: When there are multiple categories of data for each data instance, multiple data processors can be specified (separated by semicolons); in this case, classification will be performed separately for each data category, and the ensemble-learning algorithms will create combined predictions across all data categories (see EnsembleMultipleDataProcessors.txt). When multiple processors are specified, it is also possible to specify mlflex.dataprocessors.AggregateDataProcessor, which will combine the data from each of the other processors into an aggregate data set (see TCGA.txt).


=============================================================
======= Commonly used (optional) experiment settings ========
=============================================================

CLASSIFICATION_ALGORITHMS

  Description: One or more classification algorithms can be specified for a given experiment. Such algorithms are designed to predict the class (dependent variable) for a given data instance.

  Possible values: The values specified here should correspond with the names specified in the Config/Classification_Algorithm_Settings.txt file. The settings specified there will be used in the experiment.

  Examples:
    weka_naive_bayes
    weka_naive_bayes;weka_knn

  Note: If multiple algorithms are specified, classification will be performed separately for each algorithm, and ensemble-learning algorithms will then create aggregate predictions based on the output of the individual classifiers (see EnsembleMultipleAlgorithms.txt).

FEATURE_SELECTION_ALGORITHMS

  Description: One or more feature selection/ranking algorithms can specified for a given experiment. The purpose of these algorithms is to identify which features/variables are most relevant to the dependent variable (class). When features are selected/ranked, it is hoped that classification performance will improve. Note that for feature selection to be performed, it is also necessary to specify a value for NUM_FEATURES_OPTIONS (see below).

  Possible values: The values specified here should correspond with the names specified in the Config/Feature_Selection_Algorithms.txt file. The settings specified there will be used in the experiment. Excluding this setting or specifying a value of "None" indicates that no feature selection/ranking should be performed.

  Examples:
    weka_info_gain
    weka_info_gain;weka_relieff

NUM_FEATURES_OPTIONS

  Description: Commonly it is believed that not all of the features in a given data set are informative--thus feature selection can be performed to narrow the features to that believed to be most informative. However, one challenge with this approach is that it is not known a priori how many features should be considered "informative." ML-Flex can use an "inner" cross validation approach in an attempt to determine the optimal number of features. This configuration value specifies the numbers of features that should be evaluated in estimating the optimal number of features.

  Possible values: Any positive integer

  Default value: all features

  Example: 1;5;10;50;100

NUM_OUTER_CROSS_VALIDATION_FOLDS

  Description: The number of "outer" cross validation folds that will be used when cross-validation experiments are performed.

  Possible values:
    0 = leave one out cross validation
    1 = no cross validation (train / test split only)
    2 ... number of data instances (e.g., 2, 3, 4, 10) = cross validation with the number of folds specified

  Default value: 10 (10-fold cross validation)

  Example:
    10

NUM_INNER_CROSS_VALIDATION_FOLDS

  Description: The number of "inner" cross validation folds that will be used when cross-validation experiments are performed. The inner folds are used to estimate the "optimal" number of features to be used for the outer-fold predictions and for estimating weights for ensemble learners.

  Possible values:
    0 = leave one out cross validation
    1 = no cross validation (train / test split)
    2 ... number of data instances (e.g., 2, 3, 4, 10) = cross validation with the number of folds specified

  Default value: 10 (10-fold cross validation)

  Example:
    10

NUM_ITERATIONS

  Description: The number of times to repeat a given experiment. Repeating the same experiment multiple times may be desirable when one desires to assess the robustness of a given result as cross-validation assignments are selected repeatedly. The experiment output will list the results of each iteration as well as averages across the iterations.

  Possible values:
    Any positive integer

  Default value: 1

  Example:
    100


=============================================================
======= Seldomly used (optional) experiment settings ========
=============================================================

META_DATA_PROCESSORS

  Description: This configuration value contains the name of one or more Java classes that inherit from mlflex.dataprocessors.AbstractMetadataProcessor. These Java classes process raw metadata, which can then be accessed by regular data processors. For example, The Cancer Genome Atlas data sometimes contains variables with identifiers unique to a particular location in the human genome, and a metadata processor can be used to store information that translates these identifiers to gene or chromosome names.

  Possible values: These values should be the exact name of a Java class that inherits from mlflex.dataprocessors.AbstractMetadataProcessor.

  Default value: [empty]

  Example:
    mlflex.dataprocessors.tcga.TcgaMrnaMetadataProcessor

DEPENDENT_VARIABLE_TRANSFORMER

  Description: In some situations it is desirable to transform dependent-variable (class) values within an ML-Flex experiment. For example, if the class values are continuous, they must be transformed to discrete values. The Java class specified here can perform that transformation (for example, values higher than the median might be transformed to "HIGH" while remaining values to "LOW").  

  Possible values: This configuration value must contain the name of an ML-Flex Java class that inherits from mlflex.transformation.AbstractDependentVariableTransformer.

  Example:
    mlflex.transformation.MedianContinuousDependentVariableTransformer

PERMUTE_DEPENDENT_VARIABLE_VALUES

  Description: Sometimes it is valuable to perform a validation experiment in which the dependent-variable values are randomly permuted. One would not expect to obtain a positive result when this has occurred. When multiple permutations have been performed, it is also possible to perform comparisons between permuted results and non-permuted results. This technique may be useful to assess the quality of the predictions.

  Possible values: true, false

  Default value: false

  Example: false

RANDOM_SEED

  Description: A random seed is used within each experiment for assigning cross-validation folds. It may also be used for other purposes, depending on the configuration settings. By default, the random seed corresponds with the current iteration number (see NUM_ITERATIONS setting). This means that each time an ML-Flex experiment is run, it should yield reproducible results; if reproducibility is not desired, 0 (zero) may be specified.

  Possible values:
    Any positive integer or zero

  Default value: 1 for the first iteration, 2 for the second iteration, etc.

  Example:
    1

STACKING_CLASSIFICATION_ALGORITHM

  Description: This configuration value supports the "Stacked Ensemble Learner," in which individual classification algorithms predict the outcome and a secondary classification algorithm is used to form an aggregate prediction based on the individual ones. The classification algorithm specified here is the secondary one.

  Possible values: The value specified here should correspond with the name of algorithms specified in the Config/Classification_Algorithms.txt file.

  Default value: weka_decision_tree

  Example: weka_decision_tree

TEST_INSTANCE_IDS

  Description: In cases where training/testing is performed (not cross validation), it is possible to specify instances to be used for training and other instances to be used for testing. This configuration value enables specification of testing IDs. If no instances are specified, instances will be assigned randomly. Alternatively, it is possible to specify the name of a file containing a list of instance IDs to be used (one per line).

  Possible values: Any value that corresponds with an instance ID in the data set.

  Default value: [empty]

  Example: ID6;ID7;ID8;ID9;ID10

TRAIN_INSTANCE_IDS

  Description: In cases where training/testing is performed (not cross validation), it is possible to specify instances to be used for training and other instances to be used for testing. This configuration value enables specification of training IDs. If no instances are specified, instances will be assigned randomly. Alternatively, it is possible to specify the name of a file containing a list of instance IDs to be used (one per line).

  Possible values: Any value that corresponds with an instance ID in the data set.

  Default value: null

  Example: ID1;ID2;ID3;ID4;ID5

INSTANCE_IDS_TO_EXCLUDE

  Description: In some cases, it may be desirable to exclude some instances from an analysis (without having to filter them from the raw data). This configuration value enables that approach.

  Possible values: Any value that corresponds with an instance ID in the data set.

  Default value: [empty]

  Example: ID11;ID12;ID13;ID14;ID15

NUM_TRAINING_INSTANCES_TO_EXCLUDE_RANDOMLY

  Description: In some cases it may be desirable to test how robust an experiment is to outliers. One way of doing this is to repeat an experiment multiple times and exclude one or more data instances randomly from the experiment in each iteration. If the performance drops off dramatically, it may be that individual observations are highly influential. This setting can be used to perform such an experiment. Instances are excluded from training sets only.

  Possible values: any positive integer

  Default value: 0

  Example: 5
